DROP DATABASE IF EXISTS TNCR;
CREATE DATABASE TNCR;

USE TNCR;

CREATE TABLE MATERIAL(
    ID INT AUTO_INCREMENT NOT NULL,
    PRIMARY KEY (ID),
    NAME VARCHAR(64) UNIQUE NOT NULL,
    CODE VARCHAR(64) UNIQUE NOT NULL
);

CREATE TABLE ORIENTATION (
    ID INT AUTO_INCREMENT NOT NULL,
    PRIMARY KEY (ID),
    NAME VARCHAR(64) UNIQUE NOT NULL,
    CODE VARCHAR(64) UNIQUE NOT NULL
);

CREATE TABLE CARDINAL_POINT (
    ID INT AUTO_INCREMENT NOT NULL,
    PRIMARY KEY (ID),
    NAME VARCHAR(64) UNIQUE NOT NULL,
    CODE VARCHAR(64) UNIQUE NOT NULL
);

CREATE TABLE TECHNICAL_UNIT (
    ID INT AUTO_INCREMENT NOT NULL,
    PRIMARY KEY (ID),
    NAME VARCHAR(64) UNIQUE NOT NULL,
    CODE VARCHAR(64) UNIQUE NOT NULL
);

CREATE TABLE VARIABLE (
    ID INT AUTO_INCREMENT NOT NULL,
    PRIMARY KEY (ID),
    NAME VARCHAR(64) UNIQUE NOT NULL,
    CODE VARCHAR(64) UNIQUE NOT NULL,
    UNIT VARCHAR(64) NOT NULL
);

CREATE TABLE MONITORING_FREQUENCY (
    ID INT AUTO_INCREMENT NOT NULL,
    PRIMARY KEY (ID),
    FREQUENCY VARCHAR(32) UNIQUE NOT NULL,
    SCHEDULE VARCHAR(32) NOT NULL
);

CREATE TABLE WOUND
(
    ID   INT AUTO_INCREMENT NOT NULL,
    PRIMARY KEY (ID),
    NAME VARCHAR(64) UNIQUE NOT NULL,
    CODE VARCHAR(64) UNIQUE NOT NULL
);

CREATE TABLE BLOCK
(
    ID    INT AUTO_INCREMENT NOT NULL,
    PRIMARY KEY (ID),
    NAME  VARCHAR(64) UNIQUE NOT NULL,
    CODE  VARCHAR(64) UNIQUE NOT NULL,
    FLOOR INT                NOT NULL
);

CREATE TABLE ELEMENT_TYPE
(
    ID                INT AUTO_INCREMENT NOT NULL,
    PRIMARY KEY (ID),
    NAME              VARCHAR(64) NOT NULL,
    CODE              VARCHAR(64) NOT NULL,
    TECHNICAL_UNIT_ID INT                NOT NULL,
    UNIQUE(NAME, CODE, TECHNICAL_UNIT_ID),
    FOREIGN KEY (TECHNICAL_UNIT_ID) REFERENCES TECHNICAL_UNIT (ID)
);

CREATE TABLE ELEMENT
(
    ID                INT AUTO_INCREMENT NOT NULL,
    PRIMARY KEY (ID),
    CODE              VARCHAR(64) UNIQUE NOT NULL,
    NUMBER            INT,
    ORIENTATION_ID    INT,
    FOREIGN KEY (ORIENTATION_ID) REFERENCES ORIENTATION (ID),
    CARDINAL_POINT_ID INT,
    FOREIGN KEY (CARDINAL_POINT_ID) REFERENCES CARDINAL_POINT (ID),
    ELEMENT_TYPE_ID   INT,
    FOREIGN KEY (ELEMENT_TYPE_ID) REFERENCES ELEMENT_TYPE (ID),
    BLOCK_ID          INT,
    FOREIGN KEY (BLOCK_ID) REFERENCES BLOCK (ID)
);


CREATE TABLE BLOCK_ELEMENT
(
    BLOCK_ID   INT NOT NULL,
    FOREIGN KEY (BLOCK_ID) REFERENCES BLOCK (ID),
    ELEMENT_ID INT NOT NULL,
    FOREIGN KEY (ELEMENT_ID) REFERENCES ELEMENT (ID),
    PRIMARY KEY (BLOCK_ID, ELEMENT_ID)
);


CREATE TABLE ELEMENT_MATERIAL
(
    ELEMENT_ID  INT           NOT NULL,
    FOREIGN KEY (ELEMENT_ID) REFERENCES ELEMENT (ID),
    MATERIAL_ID INT           NOT NULL,
    FOREIGN KEY (MATERIAL_ID) REFERENCES MATERIAL (ID),
    PRIMARY KEY (ELEMENT_ID, MATERIAL_ID),
    REMARKS     VARCHAR(1024) NOT NULL
);

CREATE TABLE MATERIAL_RANGE
(
    MATERIAL_ID INT NOT NULL,
    FOREIGN KEY (MATERIAL_ID) REFERENCES MATERIAL (ID),
    VARIABLE_ID INT NOT NULL,
    FOREIGN KEY (VARIABLE_ID) REFERENCES VARIABLE (ID),
    PRIMARY KEY (MATERIAL_ID, VARIABLE_ID),
    MIN_RANGE   FLOAT,
    MAX_RANGE   FLOAT
);

CREATE TABLE WOUND_ELEMENT
(
    WOUND_ID        INT NOT NULL,
    FOREIGN KEY (WOUND_ID) REFERENCES WOUND (ID),
    ELEMENT_TYPE_ID INT NOT NULL,
    FOREIGN KEY (ELEMENT_TYPE_ID) REFERENCES ELEMENT_TYPE (ID),
    MATERIAL_ID     INT NOT NULL,
    FOREIGN KEY (MATERIAL_ID) REFERENCES MATERIAL (ID),
    VARIABLE_ID     INT NOT NULL,
    FOREIGN KEY (VARIABLE_ID) REFERENCES VARIABLE (ID),
    PRIMARY KEY (WOUND_ID, ELEMENT_TYPE_ID, MATERIAL_ID, VARIABLE_ID)
);

CREATE TABLE INSTRUMENT_TYPE
(
    ID   INT AUTO_INCREMENT NOT NULL,
    PRIMARY KEY (ID),
    TYPE VARCHAR(64) UNIQUE NOT NULL
);

CREATE TABLE INSTRUMENT
(
    ID                      INT AUTO_INCREMENT NOT NULL,
    PRIMARY KEY (ID),
    NAME                    VARCHAR(64) UNIQUE NOT NULL,
    CODE                    VARCHAR(64) UNIQUE NOT NULL,
    MODEL                   VARCHAR(64),
    ASSET_CODE              VARCHAR(64)        NOT NULL,
    MONITORING_FREQUENCY_ID INT,
    FOREIGN KEY (MONITORING_FREQUENCY_ID) REFERENCES MONITORING_FREQUENCY (ID),
    BLOCK_ID                INT,
    FOREIGN KEY (BLOCK_ID) REFERENCES BLOCK (ID),
    INSTRUMENT_TYPE_ID      INT                NOT NULL,
    FOREIGN KEY (INSTRUMENT_TYPE_ID) REFERENCES INSTRUMENT_TYPE (ID)
);

CREATE TABLE INSTRUMENT_VARIABLE
(
    VARIABLE_ID   INT NOT NULL,
    FOREIGN KEY (VARIABLE_ID) REFERENCES VARIABLE (ID),
    INSTRUMENT_ID INT NOT NULL,
    FOREIGN KEY (INSTRUMENT_ID) REFERENCES INSTRUMENT (ID),
    PRIMARY KEY (VARIABLE_ID, INSTRUMENT_ID)
);

CREATE TABLE ALARM_STATUS
(
    ID    INT AUTO_INCREMENT NOT NULL,
    PRIMARY KEY (ID),
    VALUE VARCHAR(32) UNIQUE NOT NULL
);

CREATE TABLE ALARM
(
    ID              INT AUTO_INCREMENT NOT NULL,
    PRIMARY KEY (ID),
    MATERIAL_ID     INT                NOT NULL,
    FOREIGN KEY (MATERIAL_ID) REFERENCES MATERIAL (ID),
    STATUS_ID       INT                NOT NULL,
    FOREIGN KEY (STATUS_ID) REFERENCES ALARM_STATUS (ID),
    INSTRUMENT_ID   INT                NOT NULL,
    FOREIGN KEY (INSTRUMENT_ID) REFERENCES INSTRUMENT (ID),
    RAISED_DATE     VARCHAR(64)        NOT NULL,
    REASON_OF_RAISE VARCHAR(128)       NOT NULL,
    AVG_VALUE       FLOAT              NOT NULL,
    VARIANCE_VALUE  FLOAT              NOT NULL,
    MAX_VALUE       FLOAT              NOT NULL,
    MIN_VALUE       FLOAT              NOT NULL,
    FREQUENCY_ID    INT                NOT NULL,
    FOREIGN KEY (FREQUENCY_ID) REFERENCES MONITORING_FREQUENCY (ID)
);


CREATE TABLE WOUND_ALARM_ACTION
(
    ALARM_ID     INT           NOT NULL,
    FOREIGN KEY (ALARM_ID) REFERENCES ALARM (ID),
    WOUND_ID     INT           NOT NULL,
    FOREIGN KEY (WOUND_ID) REFERENCES WOUND (ID),
    ACTION_TAKEN VARCHAR(1024) NOT NULL
);

CREATE VIEW ELEMENT_VIEW AS
SELECT E.ID, E.CODE, E.NUMBER, O.NAME ORIENTATION, O.ID ORIENTATION_ID, CP.NAME CARDINAL_POINT, CP.ID CADINAL_POINT_ID, ET.NAME ELEMENT_TYPE, ET.ID ELEMENT_TYPE_ID, CONCAT(B.NAME, ' - ', B.CODE) BLOCK
    FROM ELEMENT E
    INNER JOIN ELEMENT_TYPE ET ON E.ELEMENT_TYPE_ID = ET.ID
    LEFT JOIN ORIENTATION O ON E.ORIENTATION_ID = O.ID
    LEFT JOIN CARDINAL_POINT CP ON E.CARDINAL_POINT_ID = CP.ID
    INNER JOIN BLOCK_ELEMENT BE ON E.ID = BE.ELEMENT_ID
    INNER JOIN BLOCK B ON BE.BLOCK_ID = B.ID;

DROP PROCEDURE IF EXISTS RETRIEVE_ELEMENTS;
DELIMITER //
CREATE PROCEDURE RETRIEVE_ELEMENTS(
    IN P_LIMIT INT,
    IN P_OFFSET INT,
    IN P_BLOCK_ID INT,
    IN P_TECHNOLOGICAL_UNIT_ID INT
) BEGIN
    SELECT E.ID, E.CODE, E.NUMBER, O.ID ORIENTATION_ID, O.NAME ORIENTATION, CP.ID CARDINAL_POINT_ID, CP.NAME CARDINAL_POINT, ET.NAME ELEMENT_TYPE, ET.ID ELEMENT_TYPE_ID,  TU.NAME TECHNOLOGICAL_UNIT, TU.ID TECHNOLOGICAL_UNIT_ID, B.NAME BLOCK,  B.CODE BLOCK_CODE, B.ID BLOCK_ID
        FROM ELEMENT E
        INNER JOIN ELEMENT_TYPE ET ON E.ELEMENT_TYPE_ID = ET.ID
        INNER JOIN TECHNICAL_UNIT TU ON ET.TECHNICAL_UNIT_ID = TU.ID
        LEFT JOIN ORIENTATION O ON E.ORIENTATION_ID = O.ID
        LEFT JOIN CARDINAL_POINT CP ON E.CARDINAL_POINT_ID = CP.ID
        INNER JOIN BLOCK_ELEMENT BE ON E.ID = BE.ELEMENT_ID
        INNER JOIN BLOCK B ON BE.BLOCK_ID = B.ID
    WHERE (P_BLOCK_ID IS NULL OR B.ID = P_BLOCK_ID)
        AND (P_TECHNOLOGICAL_UNIT_ID IS NULL OR TU.ID = P_TECHNOLOGICAL_UNIT_ID)
    LIMIT P_LIMIT
    OFFSET P_OFFSET;
END//

DELIMITER ;

DROP TRIGGER IF EXISTS BEFORE_DELETE_ELEMENT;
CREATE TRIGGER BEFORE_DELETE_ELEMENT BEFORE DELETE ON ELEMENT FOR EACH ROW
BEGIN
    DELETE FROM BLOCK_ELEMENT WHERE ELEMENT_ID = OLD.ID;
END;

DROP PROCEDURE IF EXISTS RETRIEVE_ELEMENT_DETAIL;
CREATE PROCEDURE RETRIEVE_ELEMENT_DETAIL(
    IN P_ELEMENT_ID INT
) BEGIN
    SELECT E.ID, E.CODE, E.NUMBER, O.ID ORIENTATION_ID, O.NAME ORIENTATION, CP.ID CARDINAL_POINT_ID, CP.NAME CARDINAL_POINT, ET.NAME ELEMENT_TYPE, ET.ID ELEMENT_TYPE_ID,  TU.NAME TECHNOLOGICAL_UNIT, TU.ID TECHNOLOGICAL_UNIT_ID
        FROM ELEMENT E
        INNER JOIN ELEMENT_TYPE ET ON E.ELEMENT_TYPE_ID = ET.ID
        INNER JOIN TECHNICAL_UNIT TU ON ET.TECHNICAL_UNIT_ID = TU.ID
        LEFT JOIN ORIENTATION O ON E.ORIENTATION_ID = O.ID
        LEFT JOIN CARDINAL_POINT CP ON E.CARDINAL_POINT_ID = CP.ID
    WHERE E.ID = P_ELEMENT_ID
    LIMIT 1;
END;

DROP PROCEDURE IF EXISTS RETRIEVE_ELEMENT_MATERIALS;
CREATE PROCEDURE RETRIEVE_ELEMENT_MATERIALS(
    IN P_ELEMENT_ID INT
) BEGIN
    SELECT M.ID, M.NAME, M.CODE
        FROM MATERIAL M
        INNER JOIN (SELECT * FROM ELEMENT_MATERIAL WHERE ELEMENT_ID = P_ELEMENT_ID) EM ON M.ID = EM.MATERIAL_ID;
END;

DROP PROCEDURE IF EXISTS RETRIEVE_ELEMENT_ALARMS;
CREATE PROCEDURE RETRIEVE_ELEMENT_ALARMS(
    IN P_ELEMENT_ID INT
) BEGIN
    SELECT A.ID, A.RAISED_DATE, 'AS'.VALUE STATUS,  FROM ALARM A
        INNER JOIN ALARM_STATUS 'AS' ON A.STATUS_ID = `AS`.ID
        INNER JOIN INSTRUMENT I ON A.INSTRUMENT_ID = I.ID
        INNER JOIN BLOCK B ON I.BLOCK_ID = B.ID
        INNER JOIN (SELECT * FROM BLOCK_ELEMENT WHERE ELEMENT_ID = P_ELEMENT_ID) BE ON B.ID = BE.BLOCK_ID
        INNER JOIN ELEMENT_MATERIAL EM ON  BE.ELEMENT_ID = EM.ELEMENT_ID
        INNER JOIN MATERIAL M ON EM.MATERIAL_ID = M.ID
        INNER JOIN MATERIAL_RANGE MR on M.ID = MR.MATERIAL_ID
        INNER JOIN VARIABLE V ON MR.VARIABLE_ID = V.ID
    WHERE MR.MAX_RANGE >= A.MAX_VALUE OR MR.MIN_RANGE <= A.MIN_VALUE
    ORDER BY DATE(A.RAISED_DATE) DESC
    LIMIT 5;
END;

 B
